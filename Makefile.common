#  Copyright (c) 2012 Alexey Dyachenko <alexd@inbox.ru>
#  
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software
#  and associated documentation files (the "Software"), to deal in the Software without restriction,
#  including without limitation the rights to use, copy, modify, merge, publish, distribute,
#  sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
#  is furnished to do so, subject to the following conditions:
#  
#  The above copyright notice and this permission notice shall be included in all copies
#  or substantial portions of the Software.
#  
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
#  AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



ifndef TOOL
#TOOL	= /opt/Sourcery_gcc/bin/arm-none-eabi-
#TOOL	= /opt/Sourcery_gcc-4.5.2/bin/arm-none-eabi-
#TOOL	= /opt/Sourcery_gcc-4.6.3/bin/arm-none-eabi-
#TOOL	= /opt/Sourcery_gcc-4.7.2/bin/arm-none-eabi-

#TOOL	= /opt/arm-kgp-eabi/bin/arm-kgp-eabi-

TOOL	= /opt/arm-none-eabi/bin/arm-none-eabi-

endif

###########################################################
#  common part for all my cortex-m3 projects
###########################################################

CC			= $(TOOL)gcc
CXX			= $(TOOL)g++
LD			= $(TOOL)g++
GDB			= $(TOOL)gdb
RUN			= $(TOOL)run
AR			= $(TOOL)ar
AS			= $(CC) -x assembler-with-cpp
OBJCOPY	= $(TOOL)objcopy
OBJDUMP	= $(TOOL)objdump
SIZE		= $(TOOL)size -d

RM			= rm -f
CP			= cp
MD			= mkdir

PROJECT_BASE		:= $(shell pwd)


#  dirs
OBJDIR		= $(PROJECT_BASE)/objs
EXEDIR		= $(PROJECT_BASE)/exe
LSTDIR		= $(PROJECT_BASE)/list

RESOURCEDIR		= $(TOPDIR)/Resources

#files
HEX		= $(EXEDIR)/$(TARGET).hex
ELF		= $(EXEDIR)/$(TARGET).elf
MAP		= $(LSTDIR)/$(TARGET).map
LSS		= $(LSTDIR)/$(TARGET).lss
OK		= $(EXEDIR)/$(TARGET).ok

ifdef PROJECT_SRC
	INCLUDES	:= $(foreach entry, ${PROJECT_SRC}, -I$(PROJECT_BASE)/$(entry) )
	DIRS	    := $(foreach entry, ${PROJECT_SRC}, $(PROJECT_BASE)/$(entry) )
else
	INCLUDES	:= -I$(PROJECT_BASE)
	DIRS	    := $(PROJECT_BASE)/.
endif

ifdef PROJECT_INCLUDES
	INCLUDES	+= $(foreach entry, ${PROJECT_INCLUDES}, -I$(PROJECT_BASE)/$(entry) )
endif

VPATH	+= $(TOPDIR)/Framework/Startup
VPATH	+= $(TOPDIR)/Framework/Utils

SRCS	+= startup_gcc.c vectors.c


# processor family 
# STM32F10X_LD: STM32 Low density devices
# STM32F10X_MD: STM32 Medium density devices
# STM32F10X_HD: STM32 High density devices
# STM32F10X_CL: STM32 Connectivity line devices
#CHIP		= STM32F10X_LD
#CHIP		= STM32F10X_LD_VL

BOARD_FLAGS =

ifdef BOARD
	include $(TOPDIR)/Makefiles/BOARD.$(BOARD)
endif

ifeq ($(MCU),)
$(error MCU not set)
endif

ifeq ($(CHIP),)
$(error CHIP not set)
endif


ifdef USART_RETARGET
	SRCS	+= usart.c
	ifeq ($(USART_RETARGET),MINI)
		SRCS	+= printf-stdarg.c
		PROJECT_FLAGS += -DUSART_RETARGET=MINI
	else
		SRCS	+= newlib_stubs.c
		PROJECT_FLAGS += -DUSART_RETARGET=NEWLIB
	endif
endif


# flags
FLAGS	= -mlittle-endian 

ifdef USE_SIMULATOR
FLAGS += -DUSE_SIMULATOR
else
FLAGS	+= -mcpu=$(MCU) -mthumb -mthumb-interwork 
endif

FLAGS	+= -Wa,-gdwarf-2
FLAGS	+= $(INCLUDES)
FLAGS	+= -MD 
FLAGS	+= -D$(CHIP)
#FLAGS	+= -ggdb
#FLAGS	+= -g
FLAGS	+= $(PROJECT_FLAGS)

INCLUDES += -I$(TOPDIR)/Libraries/CMSIS/Include

ifeq ($(MCU),cortex-m3)
	# includes
	INCLUDES += -I$(TOPDIR)/Libraries/CMSIS/Device/ST/STM32F10x

	ifndef USE_SIMULATOR
		# source directories (all *.c, *.cpp and *.S files included)
		DIRS += $(TOPDIR)/Libraries/CMSIS/Device/ST/STM32F10x
	endif
else
	# includes
	INCLUDES += -I$(TOPDIR)/Libraries/CMSIS/Device/ST/STM32F4xx

	ifndef USE_SIMULATOR
		DIRS += $(TOPDIR)/Libraries/CMSIS/Device/ST/STM32F4xx
	endif

	ifdef HARD_FLOAT
		FLAGS += -fsingle-precision-constant -Wdouble-promotion
		FLAGS += -mfpu=fpv4-sp-d16 -mfloat-abi=hard
		PROJECT_LDFLAGS += -fsingle-precision-constant -Wdouble-promotion
		PROJECT_LDFLAGS += -mfpu=fpv4-sp-d16 -mfloat-abi=hard
	else
		FLAGS += -msoft-float
		PROJECT_LDFLAGS += -msoft-float
	endif
endif


ifdef PROJECT_WARNINGS
	WARNINGS = $(PROJECT_WARNINGS)
else
	WARNINGS	= -Wall -Wextra -pedantic
	WARNINGS	+=  -Wcast-align -Wpointer-arith -Wredundant-decls
#-Wimplicit
	WARNINGS	+= -Wshadow -Wcast-qual -Wcast-align
endif

CWARNINGS 	= -Wnested-externs
CXXWARNINGS	= -Winline -finline-limit=40

BASEFLAGS = $(FLAGS)

ifdef USE_STM_PERIF_LIB
	include $(TOPDIR)/Makefiles/STM_PERIF_LIB.$(MCU)
endif

ifdef USE_USB
	include $(TOPDIR)/Makefiles/USB
endif

ifdef RTOS
	include $(TOPDIR)/Makefiles/RTOS.$(RTOS)
endif

ifeq ($(START_FROM_RAM),1)
	BASEFLAGS += -DVECT_TAB_SRAM
endif


ifdef LIBRARY
	SRCS =
	DIRS = src
endif

####################################### FRAMEWORK START ####################################
INCLUDES += -I$(TOPDIR)/Framework
INCLUDES += -I$(TOPDIR)/Framework/IO
INCLUDES += -I$(TOPDIR)/Framework/Utils
####################################### FRAMEWORK END   ####################################

VPATH += $(DIRS)

#calc obj files list
OBJS	:= $(SRCS)
OBJS	+= $(wildcard $(addsuffix /*.cpp, $(DIRS)))
OBJS	+= $(wildcard $(addsuffix /*.cc, $(DIRS)))
OBJS	+= $(wildcard $(addsuffix /*.c, $(DIRS)))
OBJS	+= $(wildcard $(addsuffix /*.S, $(DIRS)))
OBJS	:= $(notdir $(OBJS))
OBJS	:= $(OBJS:.cpp=.o)
OBJS	:= $(OBJS:.cc=.o)
OBJS	:= $(OBJS:.c=.o)
OBJS	:= $(OBJS:.S=.o)
OBJS	:= $(patsubst %, $(OBJDIR)/%, $(OBJS))


AFLAGS	= $(FLAGS)
AFLAGS	+= -Wa,-adhlns=$(addprefix $(LSTDIR)/, $(notdir $(addsuffix .lst, $(basename $<))))

CFLAGS	= $(BASEFLAGS) $(BOARD_FLAGS)
CFLAGS	+= $(OPTIMIZE)
CFLAGS	+= -std=gnu99
CFLAGS	+= -ffunction-sections -fdata-sections
CFLAGS	+= $(WARNINGS) $(CWARNINGS) $(PROJECT_CWARNINGS)
CFLAGS	+= -Wa,-adhlns=$(addprefix $(LSTDIR)/, $(notdir $(addsuffix .lst, $(basename $<))))

CXXFLAGS	= $(BASEFLAGS)  $(BOARD_FLAGS)
CXXFLAGS	+= $(OPTIMIZE)
CXXFLAGS	+= -fomit-frame-pointer
CXXFLAGS	+= -fno-exceptions -fno-rtti -fcheck-new
CXXFLAGS	+= -ffunction-sections -fdata-sections
CXXFLAGS	+= -fno-elide-constructors
CXXFLAGS	+= -funsigned-bitfields -fshort-enums
CXXFLAGS	+= $(WARNINGS) $(CXXWARNINGS) $(PROJECT_CXXWARNINGS)
CXXFLAGS	+= -Wa,-adhlns=$(addprefix $(LSTDIR)/, $(notdir $(addsuffix .lst, $(basename $<))))



LD_FLAGS	= -mlittle-endian 

ifndef USE_SIMULATOR
LD_FLAGS	+= -mcpu=$(MCU)  -mthumb -mthumb-interwork
endif

LD_FLAGS	+= $(PROJECT_LDFLAGS)

ifdef STACK_SIZE 
LD_FLAGS	+=  -Wl,--defsym=STACK_SIZE=$(STACK_SIZE)
endif

ifdef HEAP_SIZE 
LD_FLAGS	+=  -Wl,--defsym=HEAP_SIZE=$(HEAP_SIZE)
endif

LD_FLAGS	+= -Wl,-Map="$(MAP)",--cref
LD_FLAGS	+= -fno-exceptions -fno-rtti	
LD_FLAGS	+= -Wl,--gc-sections
LD_FLAGS	+= -L$(RESOURCEDIR)

#LD_FLAGS	+= -T$(LD_SCRIPT)
#LD_FLAGS	+= -T$(RESOURCEDIR)/STM32COMMON.ld                                

ifdef PROJECT_LD
LD_FLAGS	+= -T$(PROJECT_LD)
else
	# linker script (chip dependent)
	LD_FLAGS	+= -T$(RESOURCEDIR)/$(CHIP).ld

	ifeq ($(START_FROM_RAM),1)
		LD_FLAGS	+= -T$(RESOURCEDIR)/STM32COMMON_RAM.ld
	else
		LD_FLAGS	+= -T$(RESOURCEDIR)/STM32COMMON.ld
	endif
endif



include $(TOPDIR)/Makefiles/Makefile.targets
